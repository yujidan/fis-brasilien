var mixedFilter = {


    $filters: null,
    $reset: null,
    groups: [],
    outputArray: [],
    outputString: '',

    init: function(){


        var self = this;

        self.$filters = $('#js-filters');
        self.$reset = $('#js-reset');
        self.$container = $('#SortContainer');
        self.$filters.find('fieldset').each(function(){

            var $this = $(this);

            self.groups.push({

                $buttons : $this.find('.filter'),
                $inputsSelect : $this.find('select'),
                $inputsText : $this.find('input[type="text"]'),
                active : ''

            });

        });

        self.bindHandlers();


    },

    // The bindHandlers method will listen for whenever a button is clicked.
    bindHandlers: function(){

        var self = this;

        // Handle button clicks
        self.$filters.on('click', '.filter', function(e) {

            e.preventDefault();

            var $button = $(this);

            // If the button is active, remove the active class, else make active and deactivate others.
            $button.hasClass('active') ?
                $button.removeClass('active') :
                $button.addClass('active').siblings('.filter').removeClass('active');

            self.parseFilters();
        });

        // Handle dropdown changes clicks
        self.$filters.on('change', 'select', function() {

            self.parseFilters();

        });

        // Handle key up on inputs
        self.$filters.on('keyup', 'input[type="text"]', function() {

            var $input = $(this);
            //console.log($input.val());
            $input.attr('data-filter', '[class*="'+$input.val().replace(/ /, '-')+'"]');
            if ($input.val() == '')
                $input.attr('data-filter', '');
            //console.log($input.attr('data-filter'));
            self.parseFilters();

        });


        // Handle reset click
        self.$reset.on('click', function(e){

            e.preventDefault();

            self.$filters.find('.filter').removeClass('active');
            self.$filters.find('.show-all').addClass('active');
            self.$filters.find('select').val('');
            self.$filters.find('input[type="text"]').val('').attr('data-filter', '');

            self.parseFilters();

        });
    },

    parseFilters: function() {

        var self = this;

        for(var i = 0, group; group = self.groups[i]; i++){

            var activeButtons = group.$buttons.length ? group.$buttons.filter('.active').attr('data-filter') || '' : '';
            var activeSelect = group.$inputsSelect.length ? group.$inputsSelect.val()  || '' : '';
            var activeText = group.$inputsText.length ? group.$inputsText.attr('data-filter') : '';

            group.active = activeButtons+activeSelect+activeText;

            //console.log(group.active);
        }

        self.concatenate();

    },

    // The "concatenate" method will crawl through each group, concatenating filters as desired:

    concatenate: function(){
        var self = this;

        self.outputString = ''; // Reset output string

        for(var i = 0, group; group = self.groups[i]; i++){
            self.outputString += group.active;
        }

        // If the output string is empty, show all rather than none:
        !self.outputString.length && (self.outputString = 'all');

        console.log(self.outputString);

        // ^ we can check the console here to take a look at the filter string that is produced

        // Send the output string to MixItUp via the 'filter' method:
        if(self.$container.mixItUp('isLoaded')){
            self.$container.mixItUp('filter', self.outputString);
        }
    }


};


// On document ready, initialise our code.

(function($, window, document, undefined) {

    // Initialize buttonFilter code

    mixedFilter.init();

    // Instantiate MixItUp

    $('#js-results').mixItUp({
        controls: {
            enable: false // we won't be needing these
        },
        callbacks: {
            onMixStart: function () {
                $('.filter-error-message').hide();
                $('.filter-error-message').removeClass('in');
            },
            onMixEnd: function () {
                $('.filter-error-message').hide();
                $('.filter-error-message').addClass('out');
                $('.filter-error-message').removeClass('in');
            },
            onMixFail: function(){
                $('.filter-error-message').show();
                $('.filter-error-message').addClass('in');
                $('.filter-error-message').removeClass('out');
                //alert('No items were found matching the selected filters.');
            }
        }
    });

    var sortOrder = 'asc',
        $container = $('#SortContainer'),
        $controller = $('.control'),
        $toggleSortName = $('.toggle-sort-name');

    $container.mixItUp({
        load: {
            sort: 'name:asc'
        }
    });

    $controller.addClass('desc');

    $toggleSortName.on('click', function() {

        switch (sortOrder) {
            case 'asc':
                sortOrder = 'desc';
                $('.toggle-sort-name').removeClass('desc');
                $('.toggle-sort-name').addClass('asc');

                break;
            case 'desc':
                sortOrder = 'asc';
                $('.toggle-sort-name').removeClass('asc');
                $('.toggle-sort-name').addClass('desc');

                break;
        }

        $('.toggle-sort-name').addClass('active');
        $container.mixItUp('sort', 'name:' + sortOrder);
    });



})(jQuery, window, document);